DIRECTORY STRUCTURE
================================================================================
bypass.c - gpio bypass test program, so far, it's a empty file.
conf -- put all configuration files here.
      |-- bypass
      |-- hwmon
      |-- loopback
gpio-loopback.c - gpio loopback test program.
hwm.conf - hardware monitor configuration file, it will move to conf/hwmon/ 
           when hardware monitor test program gets ready.
hwmon.c - hardware monitor test program.
Makefile - make file.
libpch.c - library for PCH.
libpch.h - header file for PCH library.
README - this file.
release - release directory
script -- script directory
        |-- bypass
        |-- hwmon
        |-- gpio
libsio.c - library for SIO.
libsio.h - header file for SIO library.
sitest.h - global header file.


HOW TO BUILD TEST PROGRAM
================================================================================
1. Build all test program.
    Just execute "make" command, then it will build gpio-loopback and hwmon test 
    program and copy the script/configuration files/test program to release 
    directory.

    $ make

2. Build single target.
    It also support build single test program, for example, execut "make gpio", 
	it will build gpio-loopback test program.

    $ make gpio
    or
    $ make hwmon
    or
    $ make release
	
3. DEBUG
    Developers can use DBG(a macro) to add debugging messages. The debugging 
    messages only show up when you enable DEBUG flag. By default, DEBUG flag 
    is disable.

	$ make gpio DEBUG=1

4. Clean
    It will remove everything in release directory and remove all test program 
    in current directory.

    $ make clean


KNOWN ISSUE
================================================================================
1. Test program can't determine which I2C device or PECI channel should be read.

   There are two different way can detect temperature, via I2C or PECI. For 
   AST1300, I2C can connect to several devices and PECI can connect to 8 devices
   . Software use pin to decide which sensor we want to read. But both I2C and 
   PECI only has 2 pins, S/W doesn't know which sensors should be read.
   
   Thus, we write hardcode in hwmon.c to do this, this code should be changed 
   when H/W has changed.

2. Test program can't determine which interface(PECI or I2C) should be used when
   reading temperature.

   For S0891, hardware monitor read CPU temperature via PECI and read BMC/ENV 
   temperature via I2C, test program can't determine this.

   So far, before we find a better solution, it's hard-code in hwmon.c.

3. On S0651, the input voltage of VCC_DDR is wrong, it can't be calculated with 
   the following formula:
   Vin = Vi * (R2 / (R1 + R2))
   
   For S0651, we just 8 times the value when read data from F71868A.

