DIRECTORY STRUCTURE
================================================================================
bypass.c - gpio bypass test program, so far, it's a empty file.
conf -- put all configuration files here.
      |-- bypass
      |-- hwmon
      |-- loopback
gpio-loopback.c - gpio loopback test program.
hwm.conf - hardware monitor configuration file, it will move to conf/hwmon/ 
           when hardware monitor test program gets ready.
hwmon.c - hardware monitor test program.
Makefile - make file.
pchlib.c - library for PCH.
pchlib.h - header file for PCH library.
README - this file.
release - release directory
script -- script directory
        |-- bypass
        |-- hwmon
        |-- gpio
siolib.c - library for SIO.
siolib.h - header file for SIO library.
sitest.h - global header file.


HOW TO BUILD TEST PROGRAM
================================================================================
1. Build all test program.
    Just execute "make" command, then it will build gpio-loopback and hwmon test 
    program and copy the script/configuration files/test program to release 
    directory.

    $ make

2. Build single target.
    It also support build single test program, for example, execut "make gpio", 
	it will build gpio-loopback test program.

    $ make gpio
    or
    $ make hwmon
    or
    $ make release
	
3. DEBUG
    Developers can use DBG(a macro) to add debugging messages. The debugging 
    messages only show up when you enable DEBUG flag. By default, DEBUG flag 
    is disable.

	$ make gpio DEBUG=1

4. Clean
    It will remove everything in release directory and remove all test program 
    in current directory.

    $ make clean


KNOWN ISSUE
================================================================================
1. Test program can't determine which I2C device should be read.

   We use PECI and I2C to read temperature from AST1300, it's fine when we read 
   temperature via PECI, but there is a problem when we read temperature via I2C
   . I2C only has 2 pins, DATA and CLOCK. H/W use the same bus to connect 2
   sensors, Temp_BMC and Temp_ENV, it means these two sensors use the same pin, 
   and S/W use pin to decide which sensor we want to read, so S/W doesn't know 
   which sensors should be read when it gets I2C pin from configuration file.

   So far, before we find a better solution, it's hard-code in hwmon.c.

2. Test program can't determine which interface(PECI or I2C) should be used when
   reading temperature.

   For S0891, hardware monitor read CPU temperature via PECI and read BMC/ENV 
   temperature via I2C, test program can't determine this.

   So far, before we find a better solution, it's hard-code in hwmon.c.

