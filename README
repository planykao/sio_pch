DIRECTORY STRUCTURE
================================================================================
conf -- put all configuration files here.
      |-- bypass
      |-- hwmon
      |-- loopback
	  |-- README.CONF
	  |-- wdt

docs -- documents
      |-- application.note.docx
      |-- howto.write.configuration.file.docx

include -- include directory.
         |-- i2cbusses.h
         |-- libpch.h    - header file for PCH library.
         |-- libsio.h    - header file for SIO library.
         |-- linux
           |-- i2c-dev.h
         |-- sitest.h    - global header file.

Makefile - make file.
misc -- misc directory
      |-- 

README - this file, only for developer.
README.USER - README file for user, it describe the usage for all test tool.
release  - release directory
script -- script directory
        |-- bypass
        |-- hwmon
        |-- gpio
		|-- wdt

tools -- tools directory
       |-- bypass.c    - gpio loopback test tool.
       |-- gpio.c      - for SIT only, set the GPIOs to output and pull high or low.
       |-- hwmon.c     - hardware monitor test tool.
       |-- libpch.c    - library for PCH.
       |-- libsio.c    - library for SIO.
       |-- loopback.c  - gpio loopback test tool.
       |-- Module.mk
       |-- scan_pci.c  - scan pci bus 0, device 31, function 0.
       |-- scan_sio.c  - scan 2E/4E to find SuperIO. 
       |-- wdt.c       - watchdog timer test tool.


HOW TO BUILD TEST PROGRAM
================================================================================
1. Build all test tools.
    Just execute "make" command, and it will build all test tools.

    $ make

2. Build single target.
    It also support build single test tool, for example, execut 
    "make loopback", it will build loopback test tool.

    $ make tools/gpio
    or
    $ make tools/hwmon
	
3. DEBUG
    Developers can use DBG(a macro) to add debugging messages. The debugging 
    messages only show up when you enable DEBUG flag. By default, DEBUG flag 
    is disable.

	$ make DEBUG=1

4. Release
    Copy test tools, configuration files and shell script to release directory.

    $ make release

4. Clean
    Remove all test tools in tools directory.

    $ make clean


KNOWN ISSUE
================================================================================
1. Test tool can't determine which I2C device or PECI channel should be read.

   There are two different way can detect temperature, via I2C or PECI. For 
   AST1300, I2C can connect to several devices and PECI can connect to 8 devices
   . Software use pin to decide which sensor we want to read. But both I2C and 
   PECI only has 2 pins, S/W doesn't know which sensors should be read.
   
   Thus, we write hardcode in hwmon.c to do this, this code should be changed 
   when H/W has changed.

2. Test tool can't determine which interface(PECI or I2C) should be used when
   reading temperature.

   For S0891, hardware monitor read CPU temperature via PECI and read BMC/ENV 
   temperature via I2C, test tool can't determine this.

   So far, before we find a better solution, it's hard-code in hwmon.c.

3. On S0651, the input voltage of VCC_DDR is wrong, it can't be calculated with 
   the following formula:
   Vin = Vi * (R2 / (R1 + R2))
   
   For S0651, we just 8 times the value when read data from F71868A.

4. On AST1300/AST2300, the source clock of Watchdog Timer can't configure as
   PCLK, it can configure as 1MHz only.

